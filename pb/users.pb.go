// Code generated by protoc-gen-go. DO NOT EDIT.
// source: users.proto

package pb // import "grpc_tutorial/pb"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_users_f7087b8e93e4f8d8, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserByIdPayload struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserByIdPayload) Reset()         { *m = UserByIdPayload{} }
func (m *UserByIdPayload) String() string { return proto.CompactTextString(m) }
func (*UserByIdPayload) ProtoMessage()    {}
func (*UserByIdPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_users_f7087b8e93e4f8d8, []int{1}
}
func (m *UserByIdPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserByIdPayload.Unmarshal(m, b)
}
func (m *UserByIdPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserByIdPayload.Marshal(b, m, deterministic)
}
func (dst *UserByIdPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserByIdPayload.Merge(dst, src)
}
func (m *UserByIdPayload) XXX_Size() int {
	return xxx_messageInfo_UserByIdPayload.Size(m)
}
func (m *UserByIdPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UserByIdPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UserByIdPayload proto.InternalMessageInfo

func (m *UserByIdPayload) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AllUsersPayload struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllUsersPayload) Reset()         { *m = AllUsersPayload{} }
func (m *AllUsersPayload) String() string { return proto.CompactTextString(m) }
func (*AllUsersPayload) ProtoMessage()    {}
func (*AllUsersPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_users_f7087b8e93e4f8d8, []int{2}
}
func (m *AllUsersPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllUsersPayload.Unmarshal(m, b)
}
func (m *AllUsersPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllUsersPayload.Marshal(b, m, deterministic)
}
func (dst *AllUsersPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllUsersPayload.Merge(dst, src)
}
func (m *AllUsersPayload) XXX_Size() int {
	return xxx_messageInfo_AllUsersPayload.Size(m)
}
func (m *AllUsersPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_AllUsersPayload.DiscardUnknown(m)
}

var xxx_messageInfo_AllUsersPayload proto.InternalMessageInfo

func (m *AllUsersPayload) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserPayload struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPayload) Reset()         { *m = UserPayload{} }
func (m *UserPayload) String() string { return proto.CompactTextString(m) }
func (*UserPayload) ProtoMessage()    {}
func (*UserPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_users_f7087b8e93e4f8d8, []int{3}
}
func (m *UserPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPayload.Unmarshal(m, b)
}
func (m *UserPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPayload.Marshal(b, m, deterministic)
}
func (dst *UserPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPayload.Merge(dst, src)
}
func (m *UserPayload) XXX_Size() int {
	return xxx_messageInfo_UserPayload.Size(m)
}
func (m *UserPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UserPayload proto.InternalMessageInfo

func (m *UserPayload) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserResponse struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_users_f7087b8e93e4f8d8, []int{4}
}
func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (dst *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(dst, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*UserByIdPayload)(nil), "UserByIdPayload")
	proto.RegisterType((*AllUsersPayload)(nil), "AllUsersPayload")
	proto.RegisterType((*UserPayload)(nil), "UserPayload")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserById(ctx context.Context, in *UserByIdPayload, opts ...grpc.CallOption) (*UserResponse, error)
	GetAllUsers(ctx context.Context, in *AllUsersPayload, opts ...grpc.CallOption) (UserService_GetAllUsersClient, error)
	Save(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*UserResponse, error)
	SaveAll(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveAllClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *UserByIdPayload, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *AllUsersPayload, opts ...grpc.CallOption) (UserService_GetAllUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/UserService/GetAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllUsersClient interface {
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetAllUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllUsersClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) Save(ctx context.Context, in *UserPayload, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UserService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SaveAll(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/UserService/SaveAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSaveAllClient{stream}
	return x, nil
}

type UserService_SaveAllClient interface {
	Send(*UserPayload) error
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceSaveAllClient struct {
	grpc.ClientStream
}

func (x *userServiceSaveAllClient) Send(m *UserPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSaveAllClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUserById(context.Context, *UserByIdPayload) (*UserResponse, error)
	GetAllUsers(*AllUsersPayload, UserService_GetAllUsersServer) error
	Save(context.Context, *UserPayload) (*UserResponse, error)
	SaveAll(UserService_SaveAllServer) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByIdPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*UserByIdPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllUsersPayload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllUsers(m, &userServiceGetAllUsersServer{stream})
}

type UserService_GetAllUsersServer interface {
	Send(*UserResponse) error
	grpc.ServerStream
}

type userServiceGetAllUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllUsersServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Save(ctx, req.(*UserPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SaveAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SaveAll(&userServiceSaveAllServer{stream})
}

type UserService_SaveAllServer interface {
	Send(*UserResponse) error
	Recv() (*UserPayload, error)
	grpc.ServerStream
}

type userServiceSaveAllServer struct {
	grpc.ServerStream
}

func (x *userServiceSaveAllServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSaveAllServer) Recv() (*UserPayload, error) {
	m := new(UserPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _UserService_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUsers",
			Handler:       _UserService_GetAllUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveAll",
			Handler:       _UserService_SaveAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "users.proto",
}

func init() { proto.RegisterFile("users.proto", fileDescriptor_users_f7087b8e93e4f8d8) }

var fileDescriptor_users_f7087b8e93e4f8d8 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xd9, 0xfc, 0x93, 0xbf, 0x3a, 0xa9, 0x36, 0x0c, 0x1e, 0x62, 0x4f, 0x35, 0x5e, 0xa2,
	0xc8, 0x1a, 0xea, 0x27, 0x68, 0x2f, 0xe2, 0x4d, 0x52, 0xbc, 0x88, 0x20, 0xdb, 0x66, 0x90, 0xc0,
	0xb6, 0xbb, 0xec, 0xa6, 0x95, 0x7e, 0x3b, 0x3f, 0x9a, 0xec, 0x96, 0x88, 0xee, 0xa1, 0x78, 0xdb,
	0x37, 0xf3, 0xe3, 0xed, 0x7b, 0x0c, 0xa4, 0x1b, 0x4b, 0xc6, 0x72, 0x6d, 0x54, 0xa7, 0x8a, 0x57,
	0x88, 0x9f, 0x2d, 0x19, 0x3c, 0x83, 0xa8, 0x6d, 0x72, 0x36, 0x66, 0x65, 0x52, 0x47, 0x6d, 0x83,
	0x08, 0xf1, 0x5a, 0xac, 0x28, 0x8f, 0xc6, 0xac, 0x3c, 0xa9, 0xfd, 0x1b, 0xcf, 0x21, 0xa1, 0x95,
	0x68, 0x65, 0xfe, 0xcf, 0x0f, 0xf7, 0x02, 0x47, 0x70, 0xac, 0x85, 0xb5, 0x1f, 0xca, 0x34, 0x79,
	0xec, 0x17, 0xdf, 0xba, 0xb8, 0x84, 0xa1, 0x73, 0x9f, 0xed, 0x1e, 0x9b, 0x27, 0xb1, 0x93, 0x4a,
	0x34, 0xe1, 0x47, 0xc5, 0x2d, 0x0c, 0xa7, 0x52, 0x3a, 0xca, 0xf6, 0xc8, 0x05, 0xc4, 0x2e, 0xa2,
	0x87, 0xd2, 0x49, 0xc2, 0xdd, 0xb2, 0xf6, 0xa3, 0xa2, 0x84, 0xd4, 0xa9, 0x3f, 0x90, 0xd7, 0x30,
	0xf0, 0x8a, 0xac, 0x56, 0x6b, 0x4b, 0x07, 0xd0, 0xc9, 0x27, 0xdb, 0xbb, 0xce, 0xc9, 0x6c, 0xdb,
	0x25, 0x21, 0x87, 0xf4, 0x81, 0xba, 0x3e, 0x38, 0x66, 0x3c, 0xe8, 0x30, 0x3a, 0xe5, 0xbf, 0xac,
	0x2b, 0xcf, 0xf7, 0x2d, 0x30, 0xe3, 0x41, 0xa1, 0x80, 0xaf, 0x18, 0x5e, 0x41, 0x3c, 0x17, 0x5b,
	0xc2, 0x01, 0xff, 0xd1, 0x26, 0xb4, 0xbd, 0x81, 0x23, 0x07, 0x4d, 0xa5, 0x3c, 0xc8, 0x95, 0xac,
	0x62, 0x33, 0x7c, 0xc9, 0xde, 0x8d, 0x5e, 0xbe, 0x75, 0x9b, 0x4e, 0x99, 0x56, 0xc8, 0x3b, 0xbd,
	0x58, 0xfc, 0xf7, 0x17, 0xbe, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xf9, 0x34, 0x4a, 0xf0,
	0x01, 0x00, 0x00,
}
